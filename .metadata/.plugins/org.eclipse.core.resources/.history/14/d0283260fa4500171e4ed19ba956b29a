package de.metanome.algorithms.fddetector;

import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.TreeSet;

import de.metanome.algorithm_integration.AlgorithmConfigurationException;
import de.metanome.algorithm_integration.AlgorithmExecutionException;
import de.metanome.algorithm_integration.ColumnCombination;
import de.metanome.algorithm_integration.ColumnIdentifier;
import de.metanome.algorithm_integration.ColumnPermutation;
import de.metanome.algorithm_integration.input.InputGenerationException;
import de.metanome.algorithm_integration.input.InputIterationException;
import de.metanome.algorithm_integration.input.RelationalInput;
import de.metanome.algorithm_integration.input.RelationalInputGenerator;
import de.metanome.algorithm_integration.result_receiver.ColumnNameMismatchException;
import de.metanome.algorithm_integration.result_receiver.CouldNotReceiveResultException;
import de.metanome.algorithm_integration.result_receiver.FunctionalDependencyResultReceiver;
import de.metanome.algorithm_integration.result_receiver.UniqueColumnCombinationResultReceiver;
import de.metanome.algorithm_integration.results.FunctionalDependency;
import de.metanome.algorithm_integration.results.UniqueColumnCombination;

public class FDDetectorAlgorithm {
	
	protected RelationalInputGenerator inputGenerator = null;
	protected FunctionalDependencyResultReceiver resultReceiver = null;
	
	protected String relationName;
	protected List<String> columnNames;
	protected List<List<String>> records;
	List<FunctionalDependency> results;
	protected String someStringParameter;
	protected Integer someIntegerParameter;
	private Integer depth = 0;
	protected Boolean someBooleanParameter;
	
	public void execute() throws AlgorithmExecutionException {
		
		this.initialize();

		this.records = this.readInput();

		this.print(records);

		this.generateResults();
		
		this.emit(results);
		
	}
	
	protected void initialize() throws InputGenerationException, AlgorithmConfigurationException {
		RelationalInput input = this.inputGenerator.generateNewCopy();
		this.relationName = input.relationName();
		this.columnNames = input.columnNames();
	}
	
	protected List<List<String>> readInput() throws InputGenerationException, AlgorithmConfigurationException, InputIterationException {
		List<List<String>> records = new ArrayList<>();
		RelationalInput input = this.inputGenerator.generateNewCopy();
		while (input.hasNext())
			records.add(input.next());
		return records;
	}
	
	protected void print(List<List<String>> records) {
		
		// Print schema
		System.out.print(this.relationName + "( ");
		for (String columnName : this.columnNames)
			System.out.print(columnName + " ");
		System.out.println(")");
		
		// Print records
		for (List<String> record : records) {
			System.out.print("| ");
			for (String value : record)
				System.out.print(value + " | ");
			System.out.println();
		}
	}
	
	// generates results
	protected List<FunctionalDependency> generateResults() {
		this.results = new ArrayList<>();
		List<FunctionalDependency> functionalDependencies = null;
		while(true){
			functionalDependencies = getNextColumnCombination(functionalDependencies);
			if(functionalDependencies == null || functionalDependencies.size() == 0){
				break;
			}
			for(FunctionalDependency functionalDependency : functionalDependencies){
				if(checkDependencyFor(functionalDependency)){
					this.results.add(functionalDependency);
				}
			}
			
		}
		return results;
		
	}
	
	private boolean checkDependencyFor(FunctionalDependency functionalDep){
		
		Set<ColumnIdentifier> DetIdentifiers = functionalDep.getDeterminant().getColumnIdentifiers();
		Map<String, Integer> resultMap = new HashMap<String, Integer>();
		for(List<String> record : this.records){
			String key = "";
			boolean interrupt = false;
			for(ColumnIdentifier identifier : DetIdentifiers){
				String value = record.get(this.columnNames.indexOf(identifier.getColumnIdentifier()));
				if(value == "" || value == null){
					interrupt = true;
					break;
				}
				key += value;
			}

			if(resultMap.containsKey(key)){
				//TODO
			}
			resultMap.put(key, null);
		}
		return true;
	}
	
	// returns the next column combinations that needs to be checked
	private List<FunctionalDependency> getNextColumnCombination(List<FunctionalDependency> previousFDs){
		List<FunctionalDependency> combinations = new ArrayList<FunctionalDependency>();
		
		// generate inital combinations { a, b, c, ...}
		if(previousFDs == null){
			for(int i=0; i<this.columnNames.size(); i++){
				for(int y=i; y<this.columnNames.size(); y++){
					combinations.add(new FunctionalDependency(
							new ColumnCombination(
									new ColumnIdentifier(this.relationName, this.columnNames.get(i))), 
							new ColumnIdentifier(this.relationName, this.columnNames.get(y))));
				}
				
			}
		}
		
		if(depth > 0){
			for(int i=0; i<previousFDs.size(); i++){
				for(int y=0; y<this.columnNames.size(); y++){
					// maybe reinitialize this treeset later
					Set<ColumnIdentifier> determinant = new TreeSet<ColumnIdentifier>(previousFDs.get(i).getDeterminant().getColumnIdentifiers());
					ColumnIdentifier colIdentifier = new ColumnIdentifier(this.relationName, this.columnNames.get(y));

					if(!determinant.contains(colIdentifier)){
						determinant.add(colIdentifier);
						ColumnCombination colComb = new ColumnCombination();
						colComb.setColumnIdentifiers(determinant);
						
						// consider creating this later
						FunctionalDependency fd = new FunctionalDependency(
								colComb, 
								new ColumnIdentifier(this.relationName, this.columnNames.get(y)));
						if(notProne(fd)){
							combinations.add(new FunctionalDependency(
									colComb, 
									new ColumnIdentifier(this.relationName, this.columnNames.get(y))));
						}
						
					}
						
				}
			}
		}
		
		// generate all combinations for the second run
//		if(depth==1){
//			for(int i=0; i<this.columnNames.size();i++){
//				for(int j=i+1; j<this.columnNames.size();j++){
//					ColumnCombination comb = new ColumnCombination(new ColumnIdentifier(this.relationName, this.columnNames.get(i)), new ColumnIdentifier(this.relationName, this.columnNames.get(j)));
//					if(notProne(comb)){
//						combinations.add(comb);
//					}
//				}
//			}
//		}
//		
//		// use prefixes for all the other depths
//		if(depth>1){
//			for(int i=0; i<previousCombinations.size(); i++){
//				for(int j=i+1; j<previousCombinations.size(); j++){
//					// only generate the column combination if the two candidates have the same prefix
//					if(samePrefix(previousCombinations.get(i), previousCombinations.get(j))){
//						Set<ColumnIdentifier> identifiers = new TreeSet<ColumnIdentifier>(previousCombinations.get(i).getColumnIdentifiers());
//						identifiers.addAll(previousCombinations.get(j).getColumnIdentifiers());
//						ColumnCombination comb = new ColumnCombination();
//						comb.setColumnIdentifiers(identifiers);
//						// only add the combination if it is not proned
//						if(notProne(comb)){
//							combinations.add(comb);
//						}
//					}
//				}
//			}
//		}
		depth++;
		System.out.println("processing depth: "+depth+" With "+combinations.size()+" Elements");
		return combinations;
	}
	
	// prones single Column Combinations. proning is done just in place to increase the performance
	// returns false if a found ucc is a subset of the given column combination
	private boolean notProne(FunctionalDependency comb){
//		for(FunctionalDependency ucc : this.results){
//			if(comb.getColumnIdentifiers().containsAll(ucc.getColumnCombination().getColumnIdentifiers())){
//				return false;
//			}
//		}
		return true;
	}
	
	// checks if the columns have the same prefix
	private boolean samePrefix(ColumnCombination comb1, ColumnCombination comb2){
		Iterator<ColumnIdentifier> comb1Iterator = comb1.getColumnIdentifiers().iterator();
		Iterator<ColumnIdentifier> comb2Iterator = comb2.getColumnIdentifiers().iterator();
		int i = 0;
		
		boolean result = true;
		// check for same prefix until depth size
		while(comb1Iterator.hasNext() && comb2Iterator.hasNext() && i < depth-1){
			ColumnIdentifier identifier1 = comb1Iterator.next();
			ColumnIdentifier identifier2 = comb2Iterator.next();

			if(!identifier1.equals(identifier2)){
				result = false;
			}
			i++;
		}
		return result;
	}
	
	protected void emit(List<FunctionalDependency> results) throws CouldNotReceiveResultException, ColumnNameMismatchException {
		for (FunctionalDependency od : results)
			this.resultReceiver.receiveResult(od);
	}
	
	@Override
	public String toString() {
		return this.getClass().getName();
	}
}
